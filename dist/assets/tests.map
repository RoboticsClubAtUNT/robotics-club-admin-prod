{"version":3,"sources":["robotics-club-admin/tests/app.jshint.js","robotics-club-admin/tests/application/adapter.jshint.js","robotics-club-admin/tests/application/route.jshint.js","robotics-club-admin/tests/application/serializer.jshint.js","robotics-club-admin/tests/components/confirmation-modal/component.jshint.js","robotics-club-admin/tests/components/guide-document-editor/component.jshint.js","robotics-club-admin/tests/components/guide-document-viewer/component.jshint.js","robotics-club-admin/tests/edit-guide/controller.jshint.js","robotics-club-admin/tests/edit-guide/route.jshint.js","robotics-club-admin/tests/guide/model.jshint.js","robotics-club-admin/tests/guides/controller.jshint.js","robotics-club-admin/tests/guides/guide/controller.jshint.js","robotics-club-admin/tests/guides/guide/route.jshint.js","robotics-club-admin/tests/guides/route.jshint.js","robotics-club-admin/tests/helpers/destroy-app.js","robotics-club-admin/tests/helpers/destroy-app.jshint.js","robotics-club-admin/tests/helpers/module-for-acceptance.js","robotics-club-admin/tests/helpers/module-for-acceptance.jshint.js","robotics-club-admin/tests/helpers/resolver.js","robotics-club-admin/tests/helpers/resolver.jshint.js","robotics-club-admin/tests/helpers/start-app.js","robotics-club-admin/tests/helpers/start-app.jshint.js","robotics-club-admin/tests/index/controller.jshint.js","robotics-club-admin/tests/index/route.jshint.js","robotics-club-admin/tests/integration/components/confirmation-modal/component-test.js","robotics-club-admin/tests/integration/components/confirmation-modal/component-test.jshint.js","robotics-club-admin/tests/integration/components/guide-document-editor/component-test.js","robotics-club-admin/tests/integration/components/guide-document-editor/component-test.jshint.js","robotics-club-admin/tests/integration/components/guide-document-viewer/component-test.js","robotics-club-admin/tests/integration/components/guide-document-viewer/component-test.jshint.js","robotics-club-admin/tests/new-guide/controller.jshint.js","robotics-club-admin/tests/new-guide/route.jshint.js","robotics-club-admin/tests/resolver.jshint.js","robotics-club-admin/tests/router.jshint.js","robotics-club-admin/tests/test-helper.js","robotics-club-admin/tests/test-helper.jshint.js","robotics-club-admin/tests/unit/application/adapter-test.js","robotics-club-admin/tests/unit/application/adapter-test.jshint.js","robotics-club-admin/tests/unit/application/route-test.js","robotics-club-admin/tests/unit/application/route-test.jshint.js","robotics-club-admin/tests/unit/application/serializer-test.js","robotics-club-admin/tests/unit/application/serializer-test.jshint.js","robotics-club-admin/tests/unit/edit-guide/controller-test.js","robotics-club-admin/tests/unit/edit-guide/controller-test.jshint.js","robotics-club-admin/tests/unit/edit-guide/route-test.js","robotics-club-admin/tests/unit/edit-guide/route-test.jshint.js","robotics-club-admin/tests/unit/guide/model-test.js","robotics-club-admin/tests/unit/guide/model-test.jshint.js","robotics-club-admin/tests/unit/guides/controller-test.js","robotics-club-admin/tests/unit/guides/controller-test.jshint.js","robotics-club-admin/tests/unit/guides/guide/controller-test.js","robotics-club-admin/tests/unit/guides/guide/controller-test.jshint.js","robotics-club-admin/tests/unit/guides/guide/route-test.js","robotics-club-admin/tests/unit/guides/guide/route-test.jshint.js","robotics-club-admin/tests/unit/guides/route-test.js","robotics-club-admin/tests/unit/guides/route-test.jshint.js","robotics-club-admin/tests/unit/index/controller-test.js","robotics-club-admin/tests/unit/index/controller-test.jshint.js","robotics-club-admin/tests/unit/index/route-test.js","robotics-club-admin/tests/unit/index/route-test.jshint.js","robotics-club-admin/tests/unit/new-guide/controller-test.js","robotics-club-admin/tests/unit/new-guide/controller-test.jshint.js","robotics-club-admin/tests/unit/new-guide/route-test.js","robotics-club-admin/tests/unit/new-guide/route-test.jshint.js","robotics-club-admin/tests/unit/user-auth/service-test.js","robotics-club-admin/tests/unit/user-auth/service-test.jshint.js","robotics-club-admin/tests/user-auth/service.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('robotics-club-admin/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/application/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/adapter.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/adapter.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'application/route.js should pass jshint.\\napplication/route.js: line 8, col 19, \\'transition\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('robotics-club-admin/tests/application/serializer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/serializer.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/serializer.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/components/confirmation-modal/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/confirmation-modal');\n  QUnit.test('components/confirmation-modal/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/confirmation-modal/component.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/components/guide-document-editor/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/guide-document-editor');\n  QUnit.test('components/guide-document-editor/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/guide-document-editor/component.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/components/guide-document-viewer/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/guide-document-viewer');\n  QUnit.test('components/guide-document-viewer/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/guide-document-viewer/component.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/edit-guide/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - edit-guide');\n  QUnit.test('edit-guide/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'edit-guide/controller.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/edit-guide/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - edit-guide');\n  QUnit.test('edit-guide/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'edit-guide/route.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/guide/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - guide');\n  QUnit.test('guide/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'guide/model.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/guides/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - guides');\n  QUnit.test('guides/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'guides/controller.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/guides/guide/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - guides/guide');\n  QUnit.test('guides/guide/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'guides/guide/controller.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/guides/guide/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - guides/guide');\n  QUnit.test('guides/guide/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'guides/guide/route.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/guides/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - guides');\n  QUnit.test('guides/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'guides/route.js should pass jshint.\\nguides/route.js: line 18, col 19, \\'transition\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('robotics-club-admin/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('robotics-club-admin/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'robotics-club-admin/tests/helpers/start-app', 'robotics-club-admin/tests/helpers/destroy-app'], function (exports, _qunit, _roboticsClubAdminTestsHelpersStartApp, _roboticsClubAdminTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _roboticsClubAdminTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _roboticsClubAdminTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('robotics-club-admin/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/helpers/resolver', ['exports', 'robotics-club-admin/resolver', 'robotics-club-admin/config/environment'], function (exports, _roboticsClubAdminResolver, _roboticsClubAdminConfigEnvironment) {\n\n  var resolver = _roboticsClubAdminResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _roboticsClubAdminConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _roboticsClubAdminConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('robotics-club-admin/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/helpers/start-app', ['exports', 'ember', 'robotics-club-admin/app', 'robotics-club-admin/config/environment'], function (exports, _ember, _roboticsClubAdminApp, _roboticsClubAdminConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _roboticsClubAdminConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _roboticsClubAdminApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('robotics-club-admin/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/index/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - index');\n  QUnit.test('index/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/controller.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - index');\n  QUnit.test('index/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/route.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/integration/components/confirmation-modal/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('confirmation-modal', 'Integration | Component | confirmation modal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'confirmation-modal', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'confirmation-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('robotics-club-admin/tests/integration/components/confirmation-modal/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/confirmation-modal');\n  QUnit.test('integration/components/confirmation-modal/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/confirmation-modal/component-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/integration/components/guide-document-editor/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('guide-document-editor', 'Integration | Component | guide document editor', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'guide-document-editor', ['loc', [null, [1, 0], [1, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'guide-document-editor', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('robotics-club-admin/tests/integration/components/guide-document-editor/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/guide-document-editor');\n  QUnit.test('integration/components/guide-document-editor/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/guide-document-editor/component-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/integration/components/guide-document-viewer/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('guide-document-viewer', 'Integration | Component | guide document viewer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'guide-document-viewer', ['loc', [null, [1, 0], [1, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'guide-document-viewer', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('robotics-club-admin/tests/integration/components/guide-document-viewer/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/guide-document-viewer');\n  QUnit.test('integration/components/guide-document-viewer/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/guide-document-viewer/component-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/new-guide/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - new-guide');\n  QUnit.test('new-guide/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new-guide/controller.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/new-guide/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - new-guide');\n  QUnit.test('new-guide/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new-guide/route.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/test-helper', ['exports', 'robotics-club-admin/tests/helpers/resolver', 'ember-qunit'], function (exports, _roboticsClubAdminTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_roboticsClubAdminTestsHelpersResolver['default']);\n});","define('robotics-club-admin/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/application/adapter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('robotics-club-admin/tests/unit/application/adapter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application');\n  QUnit.test('unit/application/adapter-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/adapter-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/application/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('robotics-club-admin/tests/unit/application/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application');\n  QUnit.test('unit/application/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/route-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/application/serializer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('robotics-club-admin/tests/unit/application/serializer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application');\n  QUnit.test('unit/application/serializer-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/serializer-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/edit-guide/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:edit-guide', 'Unit | Controller | edit guide', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('robotics-club-admin/tests/unit/edit-guide/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/edit-guide');\n  QUnit.test('unit/edit-guide/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/edit-guide/controller-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/edit-guide/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:edit-guide', 'Unit | Route | edit guide', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('robotics-club-admin/tests/unit/edit-guide/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/edit-guide');\n  QUnit.test('unit/edit-guide/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/edit-guide/route-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/guide/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('guide', 'Unit | Model | guide', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('robotics-club-admin/tests/unit/guide/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/guide');\n  QUnit.test('unit/guide/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/guide/model-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/guides/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:guides', 'Unit | Controller | guides', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('robotics-club-admin/tests/unit/guides/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/guides');\n  QUnit.test('unit/guides/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/guides/controller-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/guides/guide/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:guides/guide', 'Unit | Controller | guides/guide', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('robotics-club-admin/tests/unit/guides/guide/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/guides/guide');\n  QUnit.test('unit/guides/guide/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/guides/guide/controller-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/guides/guide/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:guides/guide', 'Unit | Route | guides/guide', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('robotics-club-admin/tests/unit/guides/guide/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/guides/guide');\n  QUnit.test('unit/guides/guide/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/guides/guide/route-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/guides/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:guides', 'Unit | Route | guides', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('robotics-club-admin/tests/unit/guides/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/guides');\n  QUnit.test('unit/guides/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/guides/route-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/index/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('robotics-club-admin/tests/unit/index/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/index');\n  QUnit.test('unit/index/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index/controller-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('robotics-club-admin/tests/unit/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/index');\n  QUnit.test('unit/index/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index/route-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/new-guide/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:new-guide', 'Unit | Controller | new guide', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('robotics-club-admin/tests/unit/new-guide/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/new-guide');\n  QUnit.test('unit/new-guide/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/new-guide/controller-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/new-guide/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new-guide', 'Unit | Route | new guide', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('robotics-club-admin/tests/unit/new-guide/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/new-guide');\n  QUnit.test('unit/new-guide/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/new-guide/route-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/unit/user-auth/service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:user-auth', 'Unit | Service | user auth', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('robotics-club-admin/tests/unit/user-auth/service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/user-auth');\n  QUnit.test('unit/user-auth/service-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/user-auth/service-test.js should pass jshint.');\n  });\n});","define('robotics-club-admin/tests/user-auth/service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - user-auth');\n  QUnit.test('user-auth/service.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'user-auth/service.js should pass jshint.\\nuser-auth/service.js: line 29, col 17, Expected \\'===\\' and instead saw \\'==\\'.\\nuser-auth/service.js: line 29, col 45, Expected \\'===\\' and instead saw \\'==\\'.\\n\\n2 errors');\n  });\n});","/* jshint ignore:start */\n\nrequire('robotics-club-admin/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}